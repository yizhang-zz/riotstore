DataBlock::createBlock	block.cpp	/^DataBlock* DataBlock::createBlock(void* block) $/
DataBlock::getDefaultValue	block.cpp	/^Data DataBlock::getDefaultValue() $/
DataBlock::getNumEntries	block.cpp	/^unsigned DataBlock::getNumEntries() $/
DataBlock::getRange	block.cpp	/^Range DataBlock::getRange() $/
DataBlock::getType	block.cpp	/^int DataBlock::getType() $/
DataBlock::readBlock	block.cpp	/^long DataBlock::readBlock(FILE* file, void* target/
DenseBlock::DenseBlock	block.cpp	/^DenseBlock::DenseBlock(void* block) $/
DenseBlock::DenseBlock	block.cpp	/^DenseBlock::DenseBlock(BlockHeader* blockheader, D/
DenseBlock::DenseBlock	block.cpp	/^DenseBlock::DenseBlock(Range r, unsigned nextBlock/
DenseBlock::del	block.cpp	/^int DenseBlock::del(Key key) $/
DenseBlock::del	block.cpp	/^int DenseBlock::del(Range range) $/
DenseBlock::get	block.cpp	/^int DenseBlock::get(Key key, Data& value)$/
DenseBlock::getData	block.cpp	/^inline Data* DenseBlock::getData(Key key) $/
DenseBlock::getIterator	block.cpp	/^Iterator* DenseBlock::getIterator(Range range)$/
DenseBlock::inRange	block.cpp	/^inline bool DenseBlock::inRange(Key key) $/
DenseBlock::isDelData	block.cpp	/^inline bool DenseBlock::isDelData(Data* target, Da/
DenseBlock::isNewData	block.cpp	/^inline bool DenseBlock::isNewData(Data* target, Da/
DenseBlock::put	block.cpp	/^int DenseBlock::put(Key key, Data value) $/
DenseBlock::put	block.cpp	/^int DenseBlock::put(Iterator* iterator) $/
DenseBlock::write	block.cpp	/^long DenseBlock::write(FILE* file) $/
DenseBlock::~DenseBlock	block.cpp	/^DenseBlock::~DenseBlock()$/
DenseBlockIterator::DenseBlockIterator	iterator.cpp	/^DenseBlockIterator::DenseBlockIterator(Range range/
DenseBlockIterator::getData	iterator.cpp	/^Data DenseBlockIterator::getData() $/
DenseBlockIterator::getKey	iterator.cpp	/^Key DenseBlockIterator::getKey() $/
DenseBlockIterator::hasNext	iterator.cpp	/^bool DenseBlockIterator::hasNext() $/
EntryIterator::EntryIterator	iterator.cpp	/^EntryIterator::EntryIterator(unsigned numEntries, /
EntryIterator::getData	iterator.cpp	/^Data EntryIterator::getData()$/
EntryIterator::getEntry	iterator.cpp	/^Entry EntryIterator::getEntry()$/
EntryIterator::getKey	iterator.cpp	/^Key EntryIterator::getKey()$/
EntryIterator::hasNext	iterator.cpp	/^bool EntryIterator::hasNext()$/
Mtry.cpp	try.cpp	/^int main()$/
OFFSET	simple.h	/^#define OFFSET(Key key) key \/ NUM_DENSE_ENTRIES$/
R_IsNA	data.c	/^bool R_IsNA(double x)$/
R_ValueOfNA	data.h	/^static double R_ValueOfNA()$/
SimpleManager::SimpleManger	simple.cpp	/^SimpleManager::SimpleManger(const char* name, Data/
SimpleManager::access	simple.cpp	/^long SimpleManager::access(long offset, const char/
SimpleManager::get	simple.cpp	/^int SimpleManager::get(Key key, Data& value)$/
SimpleManager::getIterator	simple.cpp	/^Iterator* SimpleManager::getIterator(Range range)$/
SimpleManager::inRange	simple.cpp	/^inline bool SimpleManager::inRange(Key key)$/
SimpleManager::initialize	simple.cpp	/^int SimpleManager::initialize()$/
SimpleManager::put	simple.cpp	/^int SimpleManager::put(Key key, Data value)$/
SimpleManager::updateRange	simple.cpp	/^bool SimpleManager::updateRange(Range r)$/
SimpleManger::addBlock	simple.cpp	/^int SimpleManger::addBlock()$/
SparseBlock::SparseBlock	block.cpp	/^SparseBlock::SparseBlock(void* block)$/
SparseBlock::del	block.cpp	/^int SparseBlock::del(Key key)$/
SparseBlock::del	block.cpp	/^int SparseBlock::del(Range range)$/
SparseBlock::get	block.cpp	/^int SparseBlock::get(Key key, Data& value)$/
SparseBlock::getIterator	block.cpp	/^Iterator* SparseBlock::getIterator(Range range)$/
SparseBlock::put	block.cpp	/^int SparseBlock::put(Key key, Data value)$/
SparseBlock::put	block.cpp	/^int SparseBlock::put(Iterator* iterator)$/
SparseBlock::write	block.cpp	/^long SparseBlock::write(FILE* file) $/
printBlockHeader	util.cpp	/^void printBlockHeader(BlockHeader& bh) $/
printRange	util.cpp	/^void printRange(Range& r) $/
setBlockHeader	data.c	/^void setBlockHeader(BlockHeader* blockHeader, int /
setEntry	data.c	/^void setEntry(Entry& entry, Key k, Data d)$/
setRange	data.c	/^void setRange(Range& range, Key lower, Key upper) /
